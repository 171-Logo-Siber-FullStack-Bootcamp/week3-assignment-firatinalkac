{"ast":null,"code":"import React, { useRef } from \"react\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Tab = createBottomTabNavigator();\nexport default function TabMenu() {\n  var tabOffsetValue = useRef(new Animated.Value(0).current);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(Tab.Navigator, {\n      tabBarOptions: {\n        showLabel: false\n      },\n      screenOptions: function screenOptions(_ref) {\n        var route = _ref.route;\n        return {\n          headerShown: false,\n          tabBarInactiveTintColor: 'gray',\n          tabBarActiveTintColor: 'tomato',\n          tabBarStyle: {\n            backgroundColor: 'white',\n            position: 'absolute',\n            bottom: 15,\n            marginHorizontal: 20,\n            height: 60,\n            border: 'none',\n            borderRadius: 5\n          }\n        };\n      },\n      children: [_jsx(Tab.Screen, {\n        name: \"Home\",\n        component: HomeScreen,\n        options: {\n          tabBarIcon: function tabBarIcon(_ref2) {\n            var focused = _ref2.focused;\n            return _jsx(Ionicons, {\n              name: \"home-outline\",\n              size: 20,\n              color: focused ? 'tomato' : 'black'\n            });\n          }\n        },\n        listeners: function listeners(_ref3) {\n          var navigation = _ref3.navigation,\n              route = _ref3.route;\n          return {\n            tabPress: function tabPress(e) {\n              Animated.spring(tabOffsetValue, {\n                toValue: 0,\n                useNativeDriver: true\n              }).start();\n            }\n          };\n        }\n      }), _jsx(Tab.Screen, {\n        name: \"Todo\",\n        component: TodoScreen,\n        options: {\n          tabBarIcon: function tabBarIcon(_ref4) {\n            var focused = _ref4.focused;\n            return _jsx(Ionicons, {\n              name: \"list-outline\",\n              size: 23,\n              color: focused ? 'tomato' : 'black'\n            });\n          }\n        },\n        listeners: function listeners(_ref5) {\n          var navigation = _ref5.navigation,\n              route = _ref5.route;\n          return {\n            tabPress: function tabPress(e) {\n              Animated.spring(tabOffsetValue, {\n                toValue: getWidth() * 2,\n                useNativeDriver: true\n              }).start();\n            }\n          };\n        }\n      }), _jsx(Tab.Screen, {\n        name: \"User\",\n        component: UserScreen,\n        options: {\n          tabBarIcon: function tabBarIcon(_ref6) {\n            var focused = _ref6.focused;\n            return _jsx(Ionicons, {\n              name: \"person-outline\",\n              size: 20,\n              color: focused ? 'tomato' : 'black'\n            });\n          }\n        },\n        listeners: function listeners(_ref7) {\n          var navigation = _ref7.navigation,\n              route = _ref7.route;\n          return {\n            tabPress: function tabPress(e) {\n              Animated.spring(tabOffsetValue, {\n                toValue: getWidth() * 3,\n                useNativeDriver: true\n              }).start();\n            }\n          };\n        }\n      })]\n    }), _jsx(Animated.View, {\n      style: {\n        width: getWidth() - 20,\n        height: 3,\n        backgroundColor: 'tomato',\n        position: 'absolute',\n        bottom: 75,\n        left: 30,\n        borderRadius: '50px',\n        transform: [{\n          translateX: 1\n        }]\n      }\n    })]\n  });\n}\n\nfunction getWidth() {\n  var width = Dimensions.get(\"window\").width;\n  width = width - 40;\n  return width / 3;\n}\n\nfunction HomeScreen() {\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: _jsx(Text, {\n      children: \"Home!\"\n    })\n  });\n}\n\nfunction TodoScreen() {\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: _jsx(Text, {\n      children: \"TodoScreen!\"\n    })\n  });\n}\n\nfunction UserScreen() {\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: _jsx(Text, {\n      children: \"User!\"\n    })\n  });\n}","map":{"version":3,"sources":["/Users/firatinalkac/Documents/workspace/logo-bootcamp/odev/week3-assignment-firatinalkac/src/navigation/TapMenu.js"],"names":["React","useRef","Ionicons","createBottomTabNavigator","Tab","TabMenu","tabOffsetValue","Animated","Value","current","showLabel","route","headerShown","tabBarInactiveTintColor","tabBarActiveTintColor","tabBarStyle","backgroundColor","position","bottom","marginHorizontal","height","border","borderRadius","HomeScreen","tabBarIcon","focused","navigation","tabPress","e","spring","toValue","useNativeDriver","start","TodoScreen","getWidth","UserScreen","width","left","transform","translateX","Dimensions","get","flex","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React, { useRef } from \"react\";\nimport {Animated, Dimensions, Text, View} from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nconst Tab = createBottomTabNavigator();\n\nexport default function TabMenu() {\n    const tabOffsetValue = useRef(new Animated.Value(0).current)\n    return (\n           <>\n               <Tab.Navigator\n                   tabBarOptions={{\n                       showLabel: false,\n                   }}\n                   screenOptions={({ route }) => ({\n                       headerShown: false,\n                       tabBarInactiveTintColor: 'gray',\n                       tabBarActiveTintColor: 'tomato',\n                       tabBarStyle: {\n                           backgroundColor: 'white',\n                           position: 'absolute',\n                           bottom: 15,\n                           marginHorizontal: 20,\n                           height: 60,\n                           border: 'none',\n                           borderRadius: 5,\n                       }\n                   })}\n               >\n                   <Tab.Screen\n                       name=\"Home\"\n                       component={HomeScreen}\n                       options={{\n                           tabBarIcon: ({focused}) => (\n                               <Ionicons\n                                   name='home-outline'\n                                   size={20}\n                                   color={focused ? 'tomato' : 'black'}\n                               />\n                           ),\n                       }} listeners={({navigation, route}) => ({\n                       tabPress: e => {\n                           Animated.spring((tabOffsetValue), {\n                               toValue: 0,\n                               useNativeDriver: true,\n                           }).start();\n                       }\n                   })}\n                   />\n                   <Tab.Screen name=\"Todo\" component={TodoScreen} options={{\n                       tabBarIcon: ({focused}) => (\n                           <Ionicons\n                               name='list-outline'\n                               size={23}\n                               color={focused ? 'tomato' : 'black'}\n                           />\n\n                       ),\n                   }} listeners={({navigation, route}) => ({\n                       tabPress: e => {\n                           Animated.spring((tabOffsetValue), {\n                               toValue: getWidth() * 2,\n                               useNativeDriver: true,\n                           }).start();\n                       }\n                   })} />\n                   <Tab.Screen name=\"User\" component={UserScreen} options={{\n                       tabBarIcon: ({focused}) => (\n                           <Ionicons\n                               name='person-outline'\n                               size={20}\n                               color={focused ? 'tomato' : 'black'}\n                           />\n\n                       ),\n                   }} listeners={({navigation, route}) => ({\n                       tabPress: e => {\n                           Animated.spring((tabOffsetValue), {\n                               toValue: getWidth() * 3,\n                               useNativeDriver: true,\n                           }).start();\n                       }\n                   })} />\n               </Tab.Navigator>\n               <Animated.View style={{\n                   width: getWidth() -20,\n                   height: 3,\n                   backgroundColor: 'tomato',\n                   position: 'absolute',\n                   bottom: 75,\n                   left: 30,\n                   borderRadius: '50px',\n                   transform: [\n                       { translateX: 1 }\n                   ]\n               }}>\n\n               </Animated.View>\n           </>\n    );\n}\n\nfunction getWidth() {\n    let width = Dimensions.get(\"window\").width\n    width = width -40\n    return width / 3\n}\n\nfunction HomeScreen() {\n    return (\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n            <Text>Home!</Text>\n        </View>\n    );\n}\n\nfunction TodoScreen() {\n    return (\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n            <Text>TodoScreen!</Text>\n        </View>\n    );\n}\n\nfunction UserScreen() {\n    return (\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n            <Text>User!</Text>\n        </View>\n    );\n}"]},"metadata":{},"sourceType":"module"}